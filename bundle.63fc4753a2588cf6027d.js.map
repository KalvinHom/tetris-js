{"version":3,"sources":["webpack:///./src/piece.js","webpack:///./src/l_piece.js","webpack:///./src/game.js","webpack:///./src/l2_piece.js","webpack:///./src/z_piece.js","webpack:///./src/z2_piece.js","webpack:///./src/t_piece.js","webpack:///./src/line_piece.js","webpack:///./src/o_piece.js","webpack:///./src/script.js","webpack:///./src/board.js","webpack:///./src/canvas.js","webpack:///./src/constants.js"],"names":["constructor","this","rotation_index","rotations","getShape","rotate","direction","limit","length","Piece","super","color","PIECES","LPiece","game","board","width","height","Array","fill","map","clearLines","linesCleared","i","filledLine","j","splice","unshift","isSpotAvailable","piece","x","y","shape","placePiece","console","log","canvas","boardPosX","boardPosY","cellSize","levelPosX","levelPosY","scorePosX","scorePosY","previewX","previewY","boarderColor","borderThickness","document","querySelector","window","innerWidth","innerHeight","context","getContext","drawBorders","boardBorder","beginPath","lineWidth","moveTo","lineTo","closePath","strokeStyle","borderColor","stroke","drawGrid","boardRight","boardBottom","drawBoard","clearRect","drawSquare","drawLevel","level","font","fillStyle","fillText","drawScore","score","drawPiecePreview","scoreBorder","drawPiece","posX","posY","fillRect","state","gameSpeed","speedMode","speedAmount","numClears","placeNewPiece","nextPiece","setNextPiece","currentPiece","pieceX","pieceY","gameOver","rotatedPiece","Object","assign","create","getPrototypeOf","verifyRotation","render","offset","movePieceLeft","movePieceRight","speedOn","speedOff","incrementPiece","addScore","addLevel","Math","pow","rand","floor","random","startGame","lastRenderTime","Date","now","requestAnimationFrame","tick","bind","fired","addEventListener","event","key"],"mappings":"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","file":"bundle.63fc4753a2588cf6027d.js","sourcesContent":["class Piece {\r\n  constructor() {\r\n    this.rotation_index = 0;\r\n    this.rotations = [];\r\n  }\r\n\r\n  getShape() {\r\n    return this.rotations[this.rotation_index];\r\n  }\r\n  rotate(direction) {\r\n    const limit = this.rotations.length;\r\n    this.rotation_index = this.rotation_index + direction;\r\n    if (this.rotation_index >= limit) {\r\n      this.rotation_index = 0;\r\n    }\r\n    if (this.rotation_index < 0) this.rotation_index = limit - 1;\r\n  }\r\n}\r\n\r\nexport default Piece;\r\n","import Piece from \"./piece\";\r\n\r\nclass LPiece extends Piece {\r\n  constructor() {\r\n    super();\r\n    this.color = \"green\";\r\n    this.rotations = [\r\n      [\r\n        [0, 0, 1],\r\n        [1, 1, 1],\r\n        [0, 0, 0],\r\n      ],\r\n      [\r\n        [0, 1, 0],\r\n        [0, 1, 0],\r\n        [0, 1, 1],\r\n      ],\r\n      [\r\n        [0, 0, 0],\r\n        [1, 1, 1],\r\n        [1, 0, 0],\r\n      ],\r\n\r\n      [\r\n        [1, 1, 0],\r\n        [0, 1, 0],\r\n        [0, 1, 0],\r\n      ],\r\n    ];\r\n  }\r\n}\r\n\r\nexport default LPiece;\r\n","import Board from \"./board\";\r\nimport Canvas from \"./canvas\";\r\nimport LinePiece from \"./line_piece\";\r\nimport LPiece from \"./l_piece\";\r\nimport L2Piece from \"./l2_piece\";\r\nimport OPiece from \"./o_piece\";\r\nimport ZPiece from \"./z_piece\";\r\nimport Z2Piece from \"./z2_piece\";\r\nimport TPiece from \"./t_piece\";\r\n\r\nconst PIECES = [LPiece, L2Piece, ZPiece, Z2Piece, TPiece, LinePiece, OPiece];\r\n\r\nconst ALIVE = 0;\r\nconst GAMEOVER = 1;\r\n\r\nclass Game {\r\n  constructor() {\r\n    this.board = new Board(10, 25);\r\n    this.canvas = new Canvas(this.board);\r\n    this.state = ALIVE;\r\n    this.gameSpeed = 1000;\r\n    this.speedMode = false;\r\n    this.speedAmount = 10;\r\n    this.level = 1;\r\n    this.score = 0;\r\n    this.numClears = 0;\r\n  }\r\n\r\n  placeNewPiece() {\r\n    const piece = this.nextPiece;\r\n    this.setNextPiece();\r\n    this.currentPiece = piece;\r\n    this.pieceX = 3;\r\n    this.pieceY = 0;\r\n\r\n    const available = this.board.isSpotAvailable(\r\n      this.currentPiece,\r\n      this.pieceX,\r\n      this.pieceY\r\n    );\r\n    if (!available) this.gameOver();\r\n  }\r\n\r\n  rotate(direction) {\r\n    let rotatedPiece = Object.assign(\r\n      Object.create(Object.getPrototypeOf(this.currentPiece)),\r\n      this.currentPiece\r\n    );\r\n    rotatedPiece.rotate(direction);\r\n    const isValid = this.verifyRotation(rotatedPiece, 0);\r\n    if (isValid) this.currentPiece = rotatedPiece;\r\n    this.render();\r\n  }\r\n\r\n  // if the rotated piece doesn't fit its spot, attempt to shift it one right\r\n  // and then one left.  If no result fits, the piece does not rotate.\r\n  verifyRotation(piece, offset) {\r\n    const isValid = this.board.isSpotAvailable(\r\n      piece,\r\n      this.pieceX + offset,\r\n      this.pieceY\r\n    );\r\n    if (isValid) {\r\n      this.pieceX += offset;\r\n      return true;\r\n    }\r\n    if (offset == 0) return this.verifyRotation(piece, 1);\r\n    if (offset == 1) return this.verifyRotation(piece, -1);\r\n    return false;\r\n  }\r\n\r\n  gameOver() {\r\n    this.state = GAMEOVER;\r\n    this.canvas.drawPiece(this.currentPiece);\r\n  }\r\n\r\n  movePieceLeft() {\r\n    const available = this.board.isSpotAvailable(\r\n      this.currentPiece,\r\n      this.pieceX - 1,\r\n      this.pieceY\r\n    );\r\n    if (available) this.pieceX -= 1;\r\n    this.render();\r\n  }\r\n\r\n  movePieceRight() {\r\n    const available = this.board.isSpotAvailable(\r\n      this.currentPiece,\r\n      this.pieceX + 1,\r\n      this.pieceY\r\n    );\r\n    if (available) this.pieceX += 1;\r\n    this.render();\r\n  }\r\n\r\n  speedOn() {\r\n    this.speedMode = true;\r\n  }\r\n\r\n  speedOff() {\r\n    this.speedMode = false;\r\n  }\r\n  incrementPiece() {\r\n    const available = this.board.isSpotAvailable(\r\n      this.currentPiece,\r\n      this.pieceX,\r\n      this.pieceY + 1\r\n    );\r\n\r\n    if (available) this.pieceY = this.pieceY + 1;\r\n    else {\r\n      this.board.placePiece(this.currentPiece, this.pieceX, this.pieceY);\r\n      const linesCleared = this.board.clearLines();\r\n      if (linesCleared > 0) this.numClears++;\r\n\r\n      this.addScore(linesCleared);\r\n      this.addLevel();\r\n      this.placeNewPiece(this.currentPiece);\r\n    }\r\n  }\r\n\r\n  addScore(linesCleared) {\r\n    if (linesCleared > 0) {\r\n      this.score += this.level * Math.pow(2, linesCleared - 1) * 100;\r\n    }\r\n  }\r\n  addLevel() {\r\n    if (this.score / 1000 / this.level > this.level) {\r\n      this.level++;\r\n      this.gameSpeed / 2;\r\n    }\r\n  }\r\n\r\n  setNextPiece() {\r\n    const rand = Math.floor(Math.random() * 7);\r\n    this.nextPiece = new PIECES[rand]();\r\n  }\r\n\r\n  startGame() {\r\n    this.lastRenderTime = Date.now();\r\n    this.setNextPiece();\r\n    window.requestAnimationFrame(this.tick.bind(this));\r\n  }\r\n\r\n  render() {\r\n    this.canvas.drawBoard();\r\n    this.canvas.drawScore(this.score);\r\n    this.canvas.drawPiecePreview(this.nextPiece);\r\n    this.canvas.drawLevel(this.level);\r\n\r\n    if (this.currentPiece)\r\n      this.canvas.drawPiece(this.currentPiece, this.pieceX, this.pieceY);\r\n  }\r\n  tick() {\r\n    if (this.state == GAMEOVER) return;\r\n    const elapsed = Date.now() - this.lastRenderTime;\r\n    const speed = this.speedMode ? this.speedAmount : this.gameSpeed;\r\n\r\n    if (elapsed > speed) {\r\n      this.canvas.drawBoard();\r\n      if (!this.currentPiece) this.placeNewPiece();\r\n      else this.incrementPiece();\r\n      this.render();\r\n\r\n      this.lastRenderTime = Date.now();\r\n    }\r\n    window.requestAnimationFrame(this.tick.bind(this));\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import Piece from \"./piece\";\r\n\r\nclass L2Piece extends Piece {\r\n  constructor() {\r\n    super();\r\n    this.color = \"red\";\r\n    this.rotations = [\r\n      [\r\n        [0, 0, 0],\r\n        [1, 1, 1],\r\n        [0, 0, 1],\r\n      ],\r\n      [\r\n        [0, 1, 0],\r\n        [0, 1, 0],\r\n        [1, 1, 0],\r\n      ],\r\n      [\r\n        [1, 0, 0],\r\n        [1, 1, 1],\r\n        [0, 0, 0],\r\n      ],\r\n\r\n      [\r\n        [0, 1, 1],\r\n        [0, 1, 0],\r\n        [0, 1, 0],\r\n      ],\r\n    ];\r\n  }\r\n}\r\n\r\nexport default L2Piece;\r\n","import Piece from \"./piece\";\r\n\r\nclass ZPiece extends Piece {\r\n  constructor() {\r\n    super();\r\n    this.color = \"cyan\";\r\n    this.rotations = [\r\n      [\r\n        [0, 0, 0],\r\n        [1, 1, 0],\r\n        [0, 1, 1],\r\n      ],\r\n      [\r\n        [0, 0, 1],\r\n        [0, 1, 1],\r\n        [0, 1, 0],\r\n      ],\r\n    ];\r\n  }\r\n}\r\n\r\nexport default ZPiece;\r\n","import Piece from \"./piece\";\r\n\r\nclass Z2Piece extends Piece {\r\n  constructor() {\r\n    super();\r\n    this.color = \"orange\";\r\n    this.rotations = [\r\n      [\r\n        [0, 0, 0],\r\n        [0, 1, 1],\r\n        [1, 1, 0],\r\n      ],\r\n      [\r\n        [1, 0, 0],\r\n        [1, 1, 0],\r\n        [0, 1, 0],\r\n      ],\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Z2Piece;\r\n","import Piece from \"./piece\";\r\n\r\nclass TPiece extends Piece {\r\n  constructor() {\r\n    super();\r\n    this.color = \"pink\";\r\n    this.rotations = [\r\n      [\r\n        [0, 1, 0],\r\n        [1, 1, 1],\r\n        [0, 0, 0],\r\n      ],\r\n      [\r\n        [0, 1, 0],\r\n        [0, 1, 1],\r\n        [0, 1, 0],\r\n      ],\r\n      [\r\n        [0, 0, 0],\r\n        [1, 1, 1],\r\n        [0, 1, 0],\r\n      ],\r\n\r\n      [\r\n        [0, 1, 0],\r\n        [1, 1, 0],\r\n        [0, 1, 0],\r\n      ],\r\n    ];\r\n  }\r\n}\r\n\r\nexport default TPiece;\r\n","import Piece from \"./piece\";\r\n\r\nclass LinePiece extends Piece {\r\n  constructor() {\r\n    super();\r\n    this.color = \"blue\";\r\n    this.rotations = [\r\n      [\r\n        [0, 0, 0, 0],\r\n        [1, 1, 1, 1],\r\n        [0, 0, 0, 0],\r\n        [0, 0, 0, 0],\r\n      ],\r\n      [\r\n        [0, 1, 0, 0],\r\n        [0, 1, 0, 0],\r\n        [0, 1, 0, 0],\r\n        [0, 1, 0, 0],\r\n      ],\r\n    ];\r\n  }\r\n}\r\n\r\nexport default LinePiece;\r\n","import Piece from \"./piece\";\r\n\r\nclass OPiece extends Piece {\r\n  constructor() {\r\n    super();\r\n    this.color = \"yellow\";\r\n    this.rotations = [\r\n      [\r\n        [1, 1],\r\n        [1, 1],\r\n      ],\r\n    ];\r\n  }\r\n}\r\n\r\nexport default OPiece;\r\n","import LPiece from \"./l_piece\";\r\nimport Board from \"./board\";\r\nimport Canvas from \"./canvas\";\r\nimport Game from \"./game\";\r\nimport \"./style.css\";\r\nimport { CLOCKWISE, COUNTERCLOCKWISE } from \"./constants\";\r\n\r\nconst piece = new LPiece();\r\n\r\nconst game = new Game();\r\ngame.startGame();\r\n\r\nlet fired = false;\r\nwindow.addEventListener(\"keydown\", function (event) {\r\n  if (fired) return;\r\n  fired = true;\r\n  event.key;\r\n  switch (event.key) {\r\n    case \"ArrowLeft\":\r\n    case \"a\":\r\n      game.movePieceLeft();\r\n      break;\r\n    case \"ArrowRight\":\r\n    case \"d\":\r\n      game.movePieceRight();\r\n      break;\r\n    case \"ArrowDown\":\r\n    case \"s\":\r\n      game.speedOn();\r\n      break;\r\n    case \"q\":\r\n      game.rotate(COUNTERCLOCKWISE);\r\n      break;\r\n    case \"e\":\r\n      game.rotate(CLOCKWISE);\r\n      break;\r\n    default:\r\n      fired = false;\r\n\r\n      return;\r\n  }\r\n  fired = false;\r\n});\r\n\r\nwindow.addEventListener(\"keyup\", function (event) {\r\n  switch (event.key) {\r\n    case \"ArrowDown\":\r\n    case \"s\":\r\n      game.speedOff();\r\n      break;\r\n    default:\r\n      return;\r\n  }\r\n});\r\n","class Board {\r\n  constructor(width, height) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.board = Array(this.height)\r\n      .fill()\r\n      .map(() => Array(this.width));\r\n  }\r\n\r\n  clearLines() {\r\n    let linesCleared = 0;\r\n    let i = this.height - 1;\r\n    while (i > 0) {\r\n      let filledLine = true;\r\n      for (let j = 0; j < this.width; j++) {\r\n        if (this.board[i][j] == null) {\r\n          filledLine = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (filledLine) {\r\n        this.board.splice(i, 1);\r\n        this.board.unshift(Array(this.width));\r\n        linesCleared++;\r\n      } else {\r\n        i--;\r\n      }\r\n    }\r\n    return linesCleared;\r\n  }\r\n\r\n  isSpotAvailable(piece, x, y) {\r\n    // debugger;\r\n    if (y >= this.height) return false;\r\n\r\n    const shape = piece.getShape();\r\n    for (let i = 0; i < shape.length; ++i) {\r\n      for (let j = 0; j < shape[i].length; ++j) {\r\n        if (shape[j][i] != 0) {\r\n          if (y + j >= this.height) return false;\r\n          if (x + i < 0 || x + i >= this.width) return false;\r\n          if (this.board[y + j][x + i] != null) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  placePiece(piece, x, y) {\r\n    console.log(`placing piece at ${x}, ${y}`);\r\n\r\n    const shape = piece.getShape();\r\n    for (let i = 0; i < shape.length; ++i) {\r\n      for (let j = 0; j < shape[i].length; ++j) {\r\n        if (shape[j][i] != 0) {\r\n          this.board[y + j][x + i] = piece.color;\r\n        }\r\n      }\r\n    }\r\n    console.log(this.board);\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import Board from \"./board\";\r\nimport { HIDDEN_ROWS } from \"./constants\";\r\n\r\n// this class focuses on how to draw elements\r\nclass Canvas {\r\n  constructor(board) {\r\n    this.boardPosX = 28;\r\n    this.boardPosY = 28;\r\n    this.cellSize = 28;\r\n\r\n    this.levelPosX = 450;\r\n    this.levelPosY = 375;\r\n    this.scorePosX = 450;\r\n    this.scorePosY = 428;\r\n\r\n    this.previewX = 400;\r\n    this.previewY = 28;\r\n\r\n    this.board = board;\r\n    this.boarderColor = \"#fff\";\r\n    this.borderThickness = 0.5;\r\n\r\n    this.canvas = document.querySelector(\"canvas.tetris\");\r\n\r\n    this.canvas.width = window.innerWidth;\r\n    this.canvas.height = window.innerHeight;\r\n    this.context = this.canvas.getContext(\"2d\");\r\n  }\r\n\r\n  drawBorders() {\r\n    const boardBorder = [\r\n      this.boardPosX - this.borderThickness,\r\n      this.boardPosY + HIDDEN_ROWS * this.cellSize - this.borderThickness,\r\n      this.borderThickness + this.boardPosX + this.board.width * this.cellSize,\r\n      this.borderThickness + this.boardPosY + this.board.height * this.cellSize,\r\n    ];\r\n    this.context.beginPath();\r\n    this.context.lineWidth = 1;\r\n    this.context.moveTo(boardBorder[0], boardBorder[1]);\r\n    this.context.lineTo(boardBorder[2], boardBorder[1]);\r\n    this.context.lineTo(boardBorder[2], boardBorder[3]);\r\n    this.context.lineTo(boardBorder[0], boardBorder[3]);\r\n    this.context.closePath();\r\n    this.context.strokeStyle = this.borderColor;\r\n\r\n    this.context.stroke();\r\n  }\r\n\r\n  drawGrid() {\r\n    // horizontal lines\r\n    this.context.strokeStyle = this.borderColor;\r\n    this.context.lineWidth = 0.5;\r\n\r\n    const boardRight = this.boardPosX + this.cellSize * this.board.width;\r\n    for (let i = 3; i < this.board.height; i++) {\r\n      const height = this.boardPosY + i * this.cellSize;\r\n      this.context.beginPath();\r\n      this.context.moveTo(this.boardPosX, height);\r\n      this.context.lineTo(boardRight, height);\r\n      this.context.closePath();\r\n      this.context.stroke();\r\n    }\r\n\r\n    // vertical lines\r\n    this.context.strokeStyle = this.borderColor;\r\n    const boardBottom = this.boardPosY + this.cellSize * this.board.height;\r\n    for (let i = 1; i < this.board.width; i++) {\r\n      const height = this.boardPosX + i * this.cellSize;\r\n      this.context.beginPath();\r\n      this.context.moveTo(height, this.boardPosY + HIDDEN_ROWS * this.cellSize);\r\n      this.context.lineTo(height, boardBottom);\r\n      this.context.closePath();\r\n      this.context.stroke();\r\n    }\r\n  }\r\n  drawBoard() {\r\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.drawBorders();\r\n    this.drawGrid();\r\n    for (let i = HIDDEN_ROWS; i < this.board.height; i++) {\r\n      for (let j = 0; j < this.board.width; j++) {\r\n        if (this.board.board[i][j] != null) {\r\n          this.drawSquare(\r\n            this.boardPosX + j * this.cellSize,\r\n            this.boardPosY + i * this.cellSize,\r\n            this.board.board[i][j]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  drawLevel(level) {\r\n    this.context.stroke();\r\n    this.context.font = \"40px serif\";\r\n    this.context.fillStyle = \"#000000\";\r\n    this.context.fillText(`Level: ${level}`, this.levelPosX, this.levelPosY);\r\n  }\r\n\r\n  drawScore(score) {\r\n    this.context.stroke();\r\n    this.context.font = \"40px serif\";\r\n    this.context.fillStyle = \"#000000\";\r\n    this.context.fillText(`Score: ${score}`, this.scorePosX, this.scorePosY);\r\n  }\r\n\r\n  drawPiecePreview(piece) {\r\n    const scoreBorder = [\r\n      this.previewX - this.borderThickness,\r\n      this.previewY - this.borderThickness,\r\n      this.borderThickness + this.previewX + 200,\r\n      this.borderThickness + this.previewY + 200,\r\n    ];\r\n\r\n    this.context.beginPath();\r\n    this.context.lineWidth = 1;\r\n    this.context.moveTo(scoreBorder[0], scoreBorder[1]);\r\n    this.context.lineTo(scoreBorder[2], scoreBorder[1]);\r\n    this.context.lineTo(scoreBorder[2], scoreBorder[3]);\r\n    this.context.lineTo(scoreBorder[0], scoreBorder[3]);\r\n    this.context.closePath();\r\n    this.context.strokeStyle = this.borderColor;\r\n    this.context.stroke();\r\n    const shape = piece.getShape();\r\n    for (let i = 0; i < shape.length; ++i) {\r\n      for (let j = 0; j < shape[i].length; ++j) {\r\n        if (shape[i][j] != 0) {\r\n          this.drawSquare(\r\n            this.previewX + 50 + j * this.cellSize,\r\n            this.previewY + 50 + i * this.cellSize,\r\n            piece.color\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  drawPiece(piece, posX, posY) {\r\n    const shape = piece.getShape();\r\n    for (let i = 0; i < shape.length; ++i) {\r\n      for (let j = 0; j < shape[i].length; ++j) {\r\n        if (shape[i][j] != 0) {\r\n          if (posY + i >= HIDDEN_ROWS) {\r\n            this.drawSquare(\r\n              this.boardPosX + (posX + j) * this.cellSize,\r\n              this.boardPosY + (posY + i) * this.cellSize,\r\n              piece.color\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  drawSquare(x, y, color) {\r\n    this.context.beginPath();\r\n\r\n    this.context.fillStyle = color;\r\n    this.context.fillRect(\r\n      x + 0.5,\r\n      y + 0.5,\r\n      this.cellSize - 1,\r\n      this.cellSize - 1\r\n    );\r\n  }\r\n}\r\n\r\nexport default Canvas;\r\n","export const COUNTERCLOCKWISE = -1;\r\nexport const CLOCKWISE = 1;\r\nexport const HIDDEN_ROWS = 3;\r\n"],"sourceRoot":""}