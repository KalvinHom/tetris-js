{"version":3,"sources":["webpack:///./src/piece.js","webpack:///./src/l_piece.js","webpack:///./src/game.js","webpack:///./src/line_piece.js","webpack:///./src/o_piece.js","webpack:///./src/script.js","webpack:///./src/board.js","webpack:///./src/canvas.js","webpack:///./src/constants.js"],"names":["constructor","this","rotation_index","rotations","getShape","rotate","direction","limit","length","Piece","super","color","PIECES","LPiece","game","board","width","height","Array","fill","map","clearLines","linesCleared","i","filledLine","j","splice","unshift","isSpotAvailable","piece","x","y","shape","placePiece","canvas","boardPosX","boardPosY","cellSize","boarderColor","borderThickness","document","querySelector","window","innerWidth","innerHeight","context","getContext","drawBorders","boardBorder","beginPath","lineWidth","moveTo","lineTo","closePath","strokeStyle","borderColor","stroke","drawGrid","boardRight","boardBottom","drawBoard","clearRect","drawSquare","fillStyle","fillRect","drawPiece","posX","posY","state","gameSpeed","speedMode","speedAmount","level","score","numClears","placeNewPiece","nextPiece","setNextPiece","currentPiece","pieceX","pieceY","gameOver","rotatedPiece","Object","assign","verifyRotation","render","offset","console","log","movePieceLeft","movePieceRight","speedOn","speedOff","incrementPiece","addScore","rand","Math","floor","random","startGame","lastRenderTime","Date","now","requestAnimationFrame","tick","bind","addEventListener","event","repeat","key"],"mappings":"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","file":"bundle.fd77add2e94badbb77d8.js","sourcesContent":["class Piece {\n  constructor() {\n    this.rotation_index = 0;\n    this.rotations = [];\n  }\n\n  getShape() {\n    return this.rotations[this.rotation_index];\n  }\n  rotate(direction) {\n    const limit = this.rotations.length;\n    this.rotation_index = this.rotation_index + direction;\n    if (this.rotation_index >= limit) {\n      this.rotation_index = 0;\n    }\n    if (this.rotation_index < 0) this.rotation_index = limit - 1;\n  }\n}\n\nexport default Piece;\n","import Piece from \"./piece\";\n\nclass LPiece extends Piece {\n  constructor() {\n    super();\n    this.color = \"green\";\n    this.rotations = [\n      [\n        [0, 0, 1],\n        [1, 1, 1],\n        [0, 0, 0],\n      ],\n      [\n        [0, 1, 0],\n        [0, 1, 0],\n        [0, 1, 1],\n      ],\n      [\n        [0, 0, 0],\n        [1, 1, 1],\n        [1, 0, 0],\n      ],\n\n      [\n        [1, 1, 0],\n        [0, 1, 0],\n        [0, 1, 0],\n      ],\n    ];\n  }\n}\n\nexport default LPiece;\n","import Board from \"./board\";\nimport Canvas from \"./canvas\";\nimport LinePiece from \"./line_piece\";\nimport LPiece from \"./l_piece\";\nimport OPiece from \"./o_piece\";\n\nconst PIECES = [LPiece, LinePiece, OPiece];\n\nconst ALIVE = 0;\nconst GAMEOVER = 1;\n\nclass Game {\n  constructor() {\n    this.board = new Board(10, 22);\n    this.canvas = new Canvas(this.board);\n    this.state = ALIVE;\n    this.gameSpeed = 1000;\n    this.speedMode = false;\n    this.speedAmount = 10;\n    this.level = 1;\n    this.score = 0;\n    this.numClears = 0;\n  }\n\n  placeNewPiece() {\n    const piece = new this.nextPiece();\n    this.setNextPiece();\n    this.currentPiece = piece;\n    this.pieceX = 3;\n    this.pieceY = 0;\n\n    const available = this.board.isSpotAvailable(\n      this.currentPiece,\n      this.pieceX,\n      this.pieceY\n    );\n    if (!available) this.gameOver();\n  }\n\n  rotate(direction) {\n    let rotatedPiece = Object.assign(this.currentPiece, {});\n    rotatedPiece.rotate(direction);\n    const isValid = this.verifyRotation(rotatedPiece, 0);\n    if (isValid) this.currentPiece = rotatedPiece;\n    this.render();\n  }\n\n  // if the rotated piece doesn't fit its spot, attempt to shift it one right\n  // and then one left.  If no result fits, the piece does not rotate.\n  verifyRotation(piece, offset) {\n    const isValid = this.board.isSpotAvailable(\n      piece,\n      this.pieceX + offset,\n      this.pieceY\n    );\n\n    if (isValid) {\n      this.pieceX += offset;\n      return true;\n    }\n    console.log(\"invalid!\");\n    if (offset == 0) return this.verifyRotation(piece, 1);\n    if (offset == 1) return this.verifyRotation(piece, -1);\n    return false;\n  }\n\n  gameOver() {\n    this.state = GAMEOVER;\n    this.canvas.drawPiece(this.currentPiece);\n  }\n\n  movePieceLeft() {\n    const available = this.board.isSpotAvailable(\n      this.currentPiece,\n      this.pieceX - 1,\n      this.pieceY\n    );\n    if (available) this.pieceX -= 1;\n    this.render();\n  }\n\n  movePieceRight() {\n    const available = this.board.isSpotAvailable(\n      this.currentPiece,\n      this.pieceX + 1,\n      this.pieceY\n    );\n    if (available) this.pieceX += 1;\n    this.render();\n  }\n\n  speedOn() {\n    this.speedMode = true;\n  }\n\n  speedOff() {\n    this.speedMode = false;\n  }\n  incrementPiece() {\n    const available = this.board.isSpotAvailable(\n      this.currentPiece,\n      this.pieceX,\n      this.pieceY + 1\n    );\n    if (available) this.pieceY = this.pieceY + 1;\n    else {\n      this.board.placePiece(this.currentPiece, this.pieceX, this.pieceY);\n      const linesCleared = this.board.clearLines();\n      if (linesCleared > 0) this.numClears++;\n      if (this.numClears == 10) {\n        this.level++;\n        this.numClears = 0;\n      }\n\n      this.addScore(linesCleared);\n      this.placeNewPiece(this.currentPiece);\n    }\n  }\n\n  addScore(linesCleared) {\n    this.score += this.level * (2 ^ (linesCleared - 1)) * 100;\n  }\n\n  setNextPiece() {\n    const rand = Math.floor(Math.random() * 3);\n    this.nextPiece = PIECES[rand];\n  }\n\n  startGame() {\n    this.lastRenderTime = Date.now();\n    this.setNextPiece();\n    window.requestAnimationFrame(this.tick.bind(this));\n  }\n\n  render() {\n    this.canvas.drawBoard();\n    if (this.currentPiece)\n      this.canvas.drawPiece(this.currentPiece, this.pieceX, this.pieceY);\n  }\n  tick() {\n    if (this.state == GAMEOVER) return;\n    const elapsed = Date.now() - this.lastRenderTime;\n    const speed = this.speedMode ? this.speedAmount : this.gameSpeed;\n\n    if (elapsed > speed) {\n      this.canvas.drawBoard();\n      if (!this.currentPiece) this.placeNewPiece();\n      else this.incrementPiece();\n      this.render();\n\n      this.lastRenderTime = Date.now();\n    }\n    window.requestAnimationFrame(this.tick.bind(this));\n  }\n}\n\nexport default Game;\n","import Piece from \"./piece\";\n\nclass LinePiece extends Piece {\n  constructor() {\n    super();\n    this.color = \"blue\";\n    this.rotations = [\n      [\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n      ],\n      [\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ],\n    ];\n  }\n}\n\nexport default LinePiece;\n","import Piece from \"./piece\";\n\nclass OPiece extends Piece {\n  constructor() {\n    super();\n    this.color = \"yellow\";\n    this.rotations = [\n      [\n        [1, 1],\n        [1, 1],\n      ],\n    ];\n  }\n}\n\nexport default OPiece;\n","import LPiece from \"./l_piece\";\nimport Board from \"./board\";\nimport Canvas from \"./canvas\";\nimport Game from \"./game\";\nimport \"./style.css\";\nimport { CLOCKWISE, COUNTERCLOCKWISE } from \"./constants\";\n\nconst piece = new LPiece();\n\nconst game = new Game();\ngame.startGame();\n\nlet timeoutId = 0;\nwindow.addEventListener(\"keydown\", function (event) {\n  if (event.repeat) return;\n  event.key;\n  switch (event.key) {\n    case \"ArrowLeft\":\n    case \"a\":\n      game.movePieceLeft();\n      break;\n    case \"ArrowRight\":\n    case \"d\":\n      game.movePieceRight();\n      break;\n    case \"ArrowDown\":\n    case \"s\":\n      game.speedOn();\n      break;\n    case \"q\":\n      game.rotate(COUNTERCLOCKWISE);\n      break;\n    case \"e\":\n      game.rotate(CLOCKWISE);\n      break;\n    default:\n      return;\n  }\n});\n\nwindow.addEventListener(\"keyup\", function (event) {\n  switch (event.key) {\n    case \"ArrowDown\":\n    case \"s\":\n      game.speedOff();\n      break;\n    default:\n      return;\n  }\n});\n","class Board {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.board = Array(this.height)\n      .fill()\n      .map(() => Array(this.width));\n  }\n\n  clearLines() {\n    let linesCleared = 0;\n    let i = this.height - 1;\n    while (i > 0) {\n      let filledLine = true;\n      for (let j = 0; j < this.width; j++) {\n        if (this.board[i][j] == null) {\n          filledLine = false;\n          break;\n        }\n      }\n\n      if (filledLine) {\n        this.board.splice(i, 1);\n        this.board.unshift(Array(this.width));\n        linesCleared++;\n      } else {\n        i--;\n      }\n    }\n    return linesCleared;\n  }\n\n  isSpotAvailable(piece, x, y) {\n    if (y >= this.height) return false;\n\n    const shape = piece.getShape();\n    for (let i = 0; i < shape.length; ++i) {\n      for (let j = 0; j < shape[i].length; ++j) {\n        if (shape[j][i] != 0) {\n          if (y + j >= this.height) return false;\n          if (x + i < 0 || x + i >= this.width) return false;\n          if (this.board[y + j][x + i] != null) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  placePiece(piece, x, y) {\n    const shape = piece.getShape();\n    for (let i = 0; i < shape.length; ++i) {\n      for (let j = 0; j < shape[i].length; ++j) {\n        if (shape[j][i] != 0) {\n          this.board[y + j][x + i] = piece.color;\n        }\n      }\n    }\n  }\n}\n\nexport default Board;\n","import Board from \"./board\";\n\n// this class focuses on how to draw elements\nclass Canvas {\n  constructor(board) {\n    this.boardPosX = 28;\n    this.boardPosY = 28;\n    this.cellSize = 28;\n\n    this.board = board;\n    this.boarderColor = \"#fff\";\n    this.borderThickness = 0.5;\n\n    this.canvas = document.querySelector(\"canvas.tetris\");\n\n    this.canvas.width = window.innerWidth;\n    this.canvas.height = window.innerHeight;\n    this.context = this.canvas.getContext(\"2d\");\n  }\n\n  drawBorders() {\n    const boardBorder = [\n      this.boardPosX - this.borderThickness,\n      this.boardPosY - this.borderThickness,\n      this.borderThickness + this.boardPosX + this.board.width * this.cellSize,\n      this.borderThickness + this.boardPosY + this.board.height * this.cellSize,\n    ];\n    this.context.beginPath();\n    this.context.lineWidth = 1;\n    this.context.moveTo(boardBorder[0], boardBorder[1]);\n    this.context.lineTo(boardBorder[2], boardBorder[1]);\n    this.context.lineTo(boardBorder[2], boardBorder[3]);\n    this.context.lineTo(boardBorder[0], boardBorder[3]);\n    this.context.closePath();\n    this.context.strokeStyle = this.borderColor;\n\n    this.context.stroke();\n  }\n\n  drawGrid() {\n    // horizontal lines\n    this.context.strokeStyle = this.borderColor;\n    this.context.lineWidth = 0.5;\n\n    const boardRight = this.boardPosX + this.cellSize * this.board.width;\n    for (let i = 1; i < this.board.height; i++) {\n      const height = this.boardPosY + i * this.cellSize;\n      this.context.beginPath();\n      this.context.moveTo(this.boardPosX, height);\n      this.context.lineTo(boardRight, height);\n      this.context.closePath();\n      this.context.stroke();\n    }\n\n    // vertical lines\n    this.context.strokeStyle = this.borderColor;\n    const boardBottom = this.boardPosY + this.cellSize * this.board.height;\n    for (let i = 1; i < this.board.width; i++) {\n      const height = this.boardPosX + i * this.cellSize;\n      this.context.beginPath();\n      this.context.moveTo(height, this.boardPosY);\n      this.context.lineTo(height, boardBottom);\n      this.context.closePath();\n      this.context.stroke();\n    }\n  }\n  drawBoard() {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.drawBorders();\n    this.drawGrid();\n\n    for (let i = 0; i < this.board.height; i++) {\n      for (let j = 0; j < this.board.width; j++) {\n        if (this.board.board[i][j] != null) {\n          this.drawSquare(\n            this.boardPosX + j * this.cellSize,\n            this.boardPosY + i * this.cellSize,\n            this.board.board[i][j]\n          );\n        }\n      }\n    }\n  }\n\n  drawSquare(x, y, color) {\n    this.context.beginPath();\n\n    this.context.fillStyle = color;\n\n    this.context.fillRect(\n      x + 0.5,\n      y + 0.5,\n      this.cellSize - 1,\n      this.cellSize - 1\n    );\n  }\n\n  drawPiece(piece, posX, posY) {\n    const shape = piece.getShape();\n    for (let i = 0; i < shape.length; ++i) {\n      for (let j = 0; j < shape[i].length; ++j) {\n        if (shape[i][j] != 0) {\n          this.drawSquare(\n            this.boardPosX + (posX + j) * this.cellSize,\n            this.boardPosY + (posY + i) * this.cellSize,\n            piece.color\n          );\n        }\n      }\n    }\n  }\n}\n\nexport default Canvas;\n","export const COUNTERCLOCKWISE = -1;\nexport const CLOCKWISE = 1;\n"],"sourceRoot":""}