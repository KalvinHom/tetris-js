{"version":3,"sources":["webpack:///./src/piece.js","webpack:///./src/l_piece.js","webpack:///./src/game.js","webpack:///./src/l2_piece.js","webpack:///./src/z_piece.js","webpack:///./src/z2_piece.js","webpack:///./src/t_piece.js","webpack:///./src/line_piece.js","webpack:///./src/o_piece.js","webpack:///./src/script.js","webpack:///./src/board.js","webpack:///./src/canvas.js","webpack:///./src/constants.js"],"names":["constructor","this","rotation_index","rotations","getShape","rotate","direction","limit","length","Piece","super","color","PIECES","LPiece","game","board","width","height","hiddenHeight","Array","fill","map","clearLines","linesCleared","i","filledLine","j","splice","unshift","isSpotAvailable","piece","x","y","shape","placePiece","canvas","boardPosX","boardPosY","cellSize","levelPosX","levelPosY","scorePosX","scorePosY","previewX","previewY","boarderColor","borderThickness","document","querySelector","window","innerWidth","innerHeight","context","getContext","drawPiecePreview","scoreBorder","beginPath","lineWidth","moveTo","lineTo","closePath","strokeStyle","borderColor","stroke","drawSquare","drawLevel","level","font","fillStyle","fillText","drawScore","score","drawBorders","boardBorder","drawGrid","boardRight","boardBottom","console","log","drawBoard","clearRect","fillRect","drawPiece","posX","posY","state","gameSpeed","speedMode","speedAmount","numClears","placeNewPiece","nextPiece","setNextPiece","currentPiece","pieceX","pieceY","gameOver","rotatedPiece","Object","assign","create","getPrototypeOf","isValid","verifyRotation","render","offset","movePieceLeft","movePieceRight","speedOn","speedOff","incrementPiece","addScore","addLevel","Math","pow","rand","floor","random","startGame","lastRenderTime","Date","now","requestAnimationFrame","tick","bind","fired","addEventListener","event","key"],"mappings":"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","file":"bundle.d45a91b81c2a892125e5.js","sourcesContent":["class Piece {\n  constructor() {\n    this.rotation_index = 0;\n    this.rotations = [];\n  }\n\n  getShape() {\n    return this.rotations[this.rotation_index];\n  }\n  rotate(direction) {\n    const limit = this.rotations.length;\n    this.rotation_index = this.rotation_index + direction;\n    if (this.rotation_index >= limit) {\n      this.rotation_index = 0;\n    }\n    if (this.rotation_index < 0) this.rotation_index = limit - 1;\n  }\n}\n\nexport default Piece;\n","import Piece from \"./piece\";\n\nclass LPiece extends Piece {\n  constructor() {\n    super();\n    this.color = \"green\";\n    this.rotations = [\n      [\n        [0, 0, 1],\n        [1, 1, 1],\n        [0, 0, 0],\n      ],\n      [\n        [0, 1, 0],\n        [0, 1, 0],\n        [0, 1, 1],\n      ],\n      [\n        [0, 0, 0],\n        [1, 1, 1],\n        [1, 0, 0],\n      ],\n\n      [\n        [1, 1, 0],\n        [0, 1, 0],\n        [0, 1, 0],\n      ],\n    ];\n  }\n}\n\nexport default LPiece;\n","import Board from \"./board\";\nimport Canvas from \"./canvas\";\nimport LinePiece from \"./line_piece\";\nimport LPiece from \"./l_piece\";\nimport L2Piece from \"./l2_piece\";\nimport OPiece from \"./o_piece\";\nimport ZPiece from \"./z_piece\";\nimport Z2Piece from \"./z2_piece\";\nimport TPiece from \"./t_piece\";\n\nconst PIECES = [LPiece, L2Piece, ZPiece, Z2Piece, TPiece, LinePiece, OPiece];\n\nconst ALIVE = 0;\nconst GAMEOVER = 1;\n\nclass Game {\n  constructor() {\n    this.board = new Board(10, 25);\n    this.canvas = new Canvas(this.board);\n    this.state = ALIVE;\n    this.gameSpeed = 1000;\n    this.speedMode = false;\n    this.speedAmount = 10;\n    this.level = 1;\n    this.score = 0;\n    this.numClears = 0;\n  }\n\n  placeNewPiece() {\n    const piece = this.nextPiece;\n    this.setNextPiece();\n    this.currentPiece = piece;\n    this.pieceX = 3;\n    this.pieceY = 0;\n\n    const available = this.board.isSpotAvailable(\n      this.currentPiece,\n      this.pieceX,\n      this.pieceY\n    );\n    if (!available) this.gameOver();\n  }\n\n  rotate(direction) {\n    let rotatedPiece = Object.assign(\n      Object.create(Object.getPrototypeOf(this.currentPiece)),\n      this.currentPiece\n    );\n    rotatedPiece.rotate(direction);\n    const isValid = this.verifyRotation(rotatedPiece, 0);\n    console.log(isValid);\n    if (isValid) this.currentPiece = rotatedPiece;\n    this.render();\n  }\n\n  // if the rotated piece doesn't fit its spot, attempt to shift it one right\n  // and then one left.  If no result fits, the piece does not rotate.\n  verifyRotation(piece, offset) {\n    const isValid = this.board.isSpotAvailable(\n      piece,\n      this.pieceX + offset,\n      this.pieceY\n    );\n    console.log(isValid);\n    console.log(offset);\n    if (isValid) {\n      this.pieceX += offset;\n      return true;\n    }\n    if (offset == 0) return this.verifyRotation(piece, 1);\n    if (offset == 1) return this.verifyRotation(piece, -1);\n    return false;\n  }\n\n  gameOver() {\n    this.state = GAMEOVER;\n    this.canvas.drawPiece(this.currentPiece);\n  }\n\n  movePieceLeft() {\n    const available = this.board.isSpotAvailable(\n      this.currentPiece,\n      this.pieceX - 1,\n      this.pieceY\n    );\n    if (available) this.pieceX -= 1;\n    this.render();\n  }\n\n  movePieceRight() {\n    const available = this.board.isSpotAvailable(\n      this.currentPiece,\n      this.pieceX + 1,\n      this.pieceY\n    );\n    if (available) this.pieceX += 1;\n    this.render();\n  }\n\n  speedOn() {\n    this.speedMode = true;\n  }\n\n  speedOff() {\n    this.speedMode = false;\n  }\n  incrementPiece() {\n    const available = this.board.isSpotAvailable(\n      this.currentPiece,\n      this.pieceX,\n      this.pieceY + 1\n    );\n    if (available) this.pieceY = this.pieceY + 1;\n    else {\n      this.board.placePiece(this.currentPiece, this.pieceX, this.pieceY);\n      const linesCleared = this.board.clearLines();\n      if (linesCleared > 0) this.numClears++;\n      if (this.numClears == 10) {\n        this.level++;\n        this.numClears = 0;\n      }\n\n      this.addScore(linesCleared);\n      this.addLevel();\n      this.placeNewPiece(this.currentPiece);\n    }\n  }\n\n  addScore(linesCleared) {\n    if (linesCleared > 0) {\n      console.log(linesCleared);\n      console.log(this.level * Math.pow(2, linesCleared - 1) * 100);\n      this.score += this.level * Math.pow(2, linesCleared - 1) * 100;\n    }\n  }\n  addLevel() {\n    if (this.score / 1000 / this.level > this.level) {\n      this.level++;\n      this.gameSpeed / 2;\n    }\n  }\n\n  setNextPiece() {\n    const rand = Math.floor(Math.random() * 7);\n    this.nextPiece = new PIECES[rand]();\n  }\n\n  startGame() {\n    this.lastRenderTime = Date.now();\n    this.setNextPiece();\n    window.requestAnimationFrame(this.tick.bind(this));\n  }\n\n  render() {\n    this.canvas.drawBoard();\n    this.canvas.drawScore(this.score);\n    this.canvas.drawPiecePreview(this.nextPiece);\n    this.canvas.drawLevel(this.level);\n\n    if (this.currentPiece)\n      this.canvas.drawPiece(this.currentPiece, this.pieceX, this.pieceY);\n  }\n  tick() {\n    if (this.state == GAMEOVER) return;\n    const elapsed = Date.now() - this.lastRenderTime;\n    const speed = this.speedMode ? this.speedAmount : this.gameSpeed;\n\n    if (elapsed > speed) {\n      this.canvas.drawBoard();\n      if (!this.currentPiece) this.placeNewPiece();\n      else this.incrementPiece();\n      this.render();\n\n      this.lastRenderTime = Date.now();\n    }\n    window.requestAnimationFrame(this.tick.bind(this));\n  }\n}\n\nexport default Game;\n","import Piece from \"./piece\";\n\nclass L2Piece extends Piece {\n  constructor() {\n    super();\n    this.color = \"red\";\n    this.rotations = [\n      [\n        [0, 0, 0],\n        [1, 1, 1],\n        [0, 0, 1],\n      ],\n      [\n        [0, 1, 0],\n        [0, 1, 0],\n        [1, 1, 0],\n      ],\n      [\n        [1, 0, 0],\n        [1, 1, 1],\n        [0, 0, 0],\n      ],\n\n      [\n        [0, 1, 1],\n        [0, 1, 0],\n        [0, 1, 0],\n      ],\n    ];\n  }\n}\n\nexport default L2Piece;\n","import Piece from \"./piece\";\n\nclass ZPiece extends Piece {\n  constructor() {\n    super();\n    this.color = \"cyan\";\n    this.rotations = [\n      [\n        [0, 0, 0],\n        [1, 1, 0],\n        [0, 1, 1],\n      ],\n      [\n        [0, 0, 1],\n        [0, 1, 1],\n        [0, 1, 0],\n      ],\n    ];\n  }\n}\n\nexport default ZPiece;\n","import Piece from \"./piece\";\n\nclass Z2Piece extends Piece {\n  constructor() {\n    super();\n    this.color = \"orange\";\n    this.rotations = [\n      [\n        [0, 0, 0],\n        [0, 1, 1],\n        [1, 1, 0],\n      ],\n      [\n        [1, 0, 0],\n        [1, 1, 0],\n        [0, 1, 0],\n      ],\n    ];\n  }\n}\n\nexport default Z2Piece;\n","import Piece from \"./piece\";\n\nclass TPiece extends Piece {\n  constructor() {\n    super();\n    this.color = \"pink\";\n    this.rotations = [\n      [\n        [0, 1, 0],\n        [1, 1, 1],\n        [0, 0, 0],\n      ],\n      [\n        [0, 1, 0],\n        [0, 1, 1],\n        [0, 1, 0],\n      ],\n      [\n        [0, 0, 0],\n        [1, 1, 1],\n        [0, 1, 0],\n      ],\n\n      [\n        [0, 1, 0],\n        [1, 1, 0],\n        [0, 1, 0],\n      ],\n    ];\n  }\n}\n\nexport default TPiece;\n","import Piece from \"./piece\";\n\nclass LinePiece extends Piece {\n  constructor() {\n    super();\n    this.color = \"blue\";\n    this.rotations = [\n      [\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n      ],\n      [\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ],\n    ];\n  }\n}\n\nexport default LinePiece;\n","import Piece from \"./piece\";\n\nclass OPiece extends Piece {\n  constructor() {\n    super();\n    this.color = \"yellow\";\n    this.rotations = [\n      [\n        [1, 1],\n        [1, 1],\n      ],\n    ];\n  }\n}\n\nexport default OPiece;\n","import LPiece from \"./l_piece\";\nimport Board from \"./board\";\nimport Canvas from \"./canvas\";\nimport Game from \"./game\";\nimport \"./style.css\";\nimport { CLOCKWISE, COUNTERCLOCKWISE } from \"./constants\";\n\nconst piece = new LPiece();\n\nconst game = new Game();\ngame.startGame();\n\nlet fired = false;\nwindow.addEventListener(\"keydown\", function (event) {\n  if (fired) return;\n  fired = true;\n  event.key;\n  switch (event.key) {\n    case \"ArrowLeft\":\n    case \"a\":\n      game.movePieceLeft();\n      break;\n    case \"ArrowRight\":\n    case \"d\":\n      game.movePieceRight();\n      break;\n    case \"ArrowDown\":\n    case \"s\":\n      game.speedOn();\n      break;\n    case \"q\":\n      game.rotate(COUNTERCLOCKWISE);\n      break;\n    case \"e\":\n      game.rotate(CLOCKWISE);\n      break;\n    default:\n      fired = false;\n\n      return;\n  }\n  fired = false;\n});\n\nwindow.addEventListener(\"keyup\", function (event) {\n  switch (event.key) {\n    case \"ArrowDown\":\n    case \"s\":\n      game.speedOff();\n      break;\n    default:\n      return;\n  }\n});\n","class Board {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.hiddenHeight = 3;\n    this.board = Array(this.height + this.hiddenHeight)\n      .fill()\n      .map(() => Array(this.width));\n  }\n\n  clearLines() {\n    let linesCleared = 0;\n    let i = this.height - 1;\n    while (i > 0) {\n      let filledLine = true;\n      for (let j = 0; j < this.width; j++) {\n        if (this.board[i][j] == null) {\n          filledLine = false;\n          break;\n        }\n      }\n\n      if (filledLine) {\n        this.board.splice(i, 1);\n        this.board.unshift(Array(this.width));\n        linesCleared++;\n      } else {\n        i--;\n      }\n    }\n    return linesCleared;\n  }\n\n  isSpotAvailable(piece, x, y) {\n    // debugger;\n    if (y >= this.height) return false;\n\n    const shape = piece.getShape();\n    for (let i = 0; i < shape.length; ++i) {\n      for (let j = 0; j < shape[i].length; ++j) {\n        if (shape[j][i] != 0) {\n          if (y + j >= this.height) return false;\n          if (x + i < 0 || x + i >= this.width) return false;\n          if (this.board[y + j][x + i] != null) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  placePiece(piece, x, y) {\n    const shape = piece.getShape();\n    for (let i = 0; i < shape.length; ++i) {\n      for (let j = 0; j < shape[i].length; ++j) {\n        if (shape[j][i] != 0) {\n          this.board[y + j][x + i] = piece.color;\n        }\n      }\n    }\n  }\n}\n\nexport default Board;\n","import Board from \"./board\";\nimport { HIDDEN_ROWS } from \"./constants\";\n\n// this class focuses on how to draw elements\nclass Canvas {\n  constructor(board) {\n    this.boardPosX = 28;\n    this.boardPosY = 28;\n    this.cellSize = 28;\n\n    this.levelPosX = 450;\n    this.levelPosY = 375;\n    this.scorePosX = 450;\n    this.scorePosY = 428;\n\n    this.previewX = 400;\n    this.previewY = 28;\n\n    this.board = board;\n    this.boarderColor = \"#fff\";\n    this.borderThickness = 0.5;\n\n    this.canvas = document.querySelector(\"canvas.tetris\");\n\n    this.canvas.width = window.innerWidth;\n    this.canvas.height = window.innerHeight;\n    this.context = this.canvas.getContext(\"2d\");\n  }\n\n  drawPiecePreview(piece) {\n    const scoreBorder = [\n      this.previewX - this.borderThickness,\n      this.previewY - this.borderThickness,\n      this.borderThickness + this.previewX + 200,\n      this.borderThickness + this.previewY + 200,\n    ];\n\n    this.context.beginPath();\n    this.context.lineWidth = 1;\n    this.context.moveTo(scoreBorder[0], scoreBorder[1]);\n    this.context.lineTo(scoreBorder[2], scoreBorder[1]);\n    this.context.lineTo(scoreBorder[2], scoreBorder[3]);\n    this.context.lineTo(scoreBorder[0], scoreBorder[3]);\n    this.context.closePath();\n    this.context.strokeStyle = this.borderColor;\n    this.context.stroke();\n    const shape = piece.getShape();\n    for (let i = 0; i < shape.length; ++i) {\n      for (let j = 0; j < shape[i].length; ++j) {\n        if (shape[i][j] != 0) {\n          this.drawSquare(\n            this.previewX + 50 + j * this.cellSize,\n            this.previewY + 50 + i * this.cellSize,\n            piece.color\n          );\n        }\n      }\n    }\n  }\n\n  drawLevel(level) {\n    this.context.stroke();\n    this.context.font = \"40px serif\";\n    this.context.fillStyle = \"#000000\";\n    this.context.fillText(`Level: ${level}`, this.levelPosX, this.levelPosY);\n  }\n\n  drawScore(score) {\n    this.context.stroke();\n    this.context.font = \"40px serif\";\n    this.context.fillStyle = \"#000000\";\n    this.context.fillText(`Score: ${score}`, this.scorePosX, this.scorePosY);\n  }\n\n  drawBorders() {\n    const boardBorder = [\n      this.boardPosX - this.borderThickness,\n      this.boardPosY + HIDDEN_ROWS * this.cellSize - this.borderThickness,\n      this.borderThickness + this.boardPosX + this.board.width * this.cellSize,\n      this.borderThickness + this.boardPosY + this.board.height * this.cellSize,\n    ];\n    this.context.beginPath();\n    this.context.lineWidth = 1;\n    this.context.moveTo(boardBorder[0], boardBorder[1]);\n    this.context.lineTo(boardBorder[2], boardBorder[1]);\n    this.context.lineTo(boardBorder[2], boardBorder[3]);\n    this.context.lineTo(boardBorder[0], boardBorder[3]);\n    this.context.closePath();\n    this.context.strokeStyle = this.borderColor;\n\n    this.context.stroke();\n  }\n\n  drawGrid() {\n    // horizontal lines\n    this.context.strokeStyle = this.borderColor;\n    this.context.lineWidth = 0.5;\n\n    const boardRight = this.boardPosX + this.cellSize * this.board.width;\n    for (let i = 3; i < this.board.height; i++) {\n      const height = this.boardPosY + i * this.cellSize;\n      this.context.beginPath();\n      this.context.moveTo(this.boardPosX, height);\n      this.context.lineTo(boardRight, height);\n      this.context.closePath();\n      this.context.stroke();\n    }\n\n    // vertical lines\n    this.context.strokeStyle = this.borderColor;\n    const boardBottom = this.boardPosY + this.cellSize * this.board.height;\n    for (let i = 1; i < this.board.width; i++) {\n      const height = this.boardPosX + i * this.cellSize;\n      this.context.beginPath();\n      console.log(HIDDEN_ROWS);\n      this.context.moveTo(height, this.boardPosY + HIDDEN_ROWS * this.cellSize);\n      this.context.lineTo(height, boardBottom);\n      this.context.closePath();\n      this.context.stroke();\n    }\n  }\n  drawBoard() {\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.drawBorders();\n    this.drawGrid();\n\n    for (let i = 3; i < this.board.height; i++) {\n      for (let j = 3; j < this.board.width; j++) {\n        if (this.board.board[i][j] != null) {\n          this.drawSquare(\n            this.boardPosX + j * this.cellSize,\n            this.boardPosY + i * this.cellSize,\n            this.board.board[i][j]\n          );\n        }\n      }\n    }\n  }\n\n  drawSquare(x, y, color) {\n    this.context.beginPath();\n\n    this.context.fillStyle = color;\n    this.context.fillRect(\n      x + 0.5,\n      y + 0.5,\n      this.cellSize - 1,\n      this.cellSize - 1\n    );\n  }\n\n  drawPiece(piece, posX, posY) {\n    const shape = piece.getShape();\n    for (let i = 0; i < shape.length; ++i) {\n      for (let j = 0; j < shape[i].length; ++j) {\n        if (shape[i][j] != 0) {\n          if (posY + i >= HIDDEN_ROWS) {\n            this.drawSquare(\n              this.boardPosX + (posX + j) * this.cellSize,\n              this.boardPosY + (posY + i) * this.cellSize,\n              piece.color\n            );\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default Canvas;\n","export const COUNTERCLOCKWISE = -1;\nexport const CLOCKWISE = 1;\nexport const HIDDEN_ROWS = 3;\n"],"sourceRoot":""}